#!/usr/bin/env python3
"""
Test Enhanced Three-Stage System
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö chatbot 3 stage ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
"""

import asyncio
import json
import sys
import os

# Add the backend directory to Python path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from app.services.two_stage_llm import (
    enhanced_contextual_phrase_segmentation,
    stage1_context_analysis_and_query_builder,
    normalize_text_advanced
)

def test_enhanced_phrase_segmentation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å‡∏ß‡∏•‡∏µ‡πÉ‡∏´‡∏°‡πà"""
    print("üß† Testing Enhanced Phrase Segmentation")
    print("=" * 50)
    
    test_cases = [
        "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏¥‡∏Å ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡πà‡∏≠‡∏¢",
        "‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 15000 ‡πÑ‡∏´‡∏°",
        "‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° valorant ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 25000",
        "Ryzen 5 5600G ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°",
        "‡πÄ‡∏°‡∏≤‡∏™‡πå gaming ASUS RGB ‡∏á‡∏ö 2000",
        "‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏≠ RTX 4060 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°"
    ]
    
    for i, input_text in enumerate(test_cases, 1):
        print(f"\n{i}. Input: \"{input_text}\"")
        
        # Test enhanced segmentation
        result = enhanced_contextual_phrase_segmentation(input_text)
        
        print(f"   Segmented phrases: {len(result['segmented_phrases'])}")
        for phrase_info in result['segmented_phrases']:
            print(f"     - \"{phrase_info['phrase']}\" ({phrase_info['type']}) ‚Üí {phrase_info['stage']}")
        
        print(f"   Stage assignments:")
        for stage, phrases in result['stage_assignments'].items():
            if phrases:
                print(f"     {stage}: {phrases}")

async def test_stage1_analysis():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Stage 1 ‡πÉ‡∏´‡∏°‡πà"""
    print("\n\nüîç Testing Enhanced Stage 1 Analysis")
    print("=" * 50)
    
    test_cases = [
        "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏¥‡∏Å ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡πà‡∏≠‡∏¢",
        "‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 15000 ‡πÑ‡∏´‡∏°", 
        "Ryzen 5 5600G ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°",
        "‡πÄ‡∏°‡∏≤‡∏™‡πå gaming ASUS RGB ‡∏á‡∏ö 2000"
    ]
    
    for i, input_text in enumerate(test_cases, 1):
        print(f"\n{i}. Testing: \"{input_text}\"")
        
        try:
            result = await stage1_context_analysis_and_query_builder(input_text)
            
            print(f"   Query: {json.dumps(result['query'], ensure_ascii=False)}")
            print(f"   Stage assignments:")
            
            stage_assignments = result.get('stageAssignments', {})
            for stage, phrases in stage_assignments.items():
                if phrases:
                    print(f"     {stage}: {phrases}")
            
            print(f"   Reasoning: {result.get('reasoning', 'N/A')}")
            
        except Exception as e:
            print(f"   Error: {e}")

def test_phrase_classification():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ß‡∏•‡∏µ"""
    print("\n\nüìù Testing Phrase Classification")
    print("=" * 50)
    
    test_phrases = [
        "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏≠‡∏°",      # stage1_filter - product desire
        "‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å",         # stage1_filter - category 
        "‡∏á‡∏ö 20000",        # stage1_filter - budget
        "Ryzen 5 5600G",   # stage1_inference - specific product
        "ASUS",            # stage2_content - brand
        "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏¥‡∏Å",      # stage2_content - usage
        "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° valorant", # stage2_content - gaming usage
        "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡πà‡∏≠‡∏¢",       # stage3_questions - recommendation
        "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°",    # stage3_questions - question
        "RGB",             # stage2_content - specification
    ]
    
    for phrase in test_phrases:
        result = enhanced_contextual_phrase_segmentation(phrase)
        if result['segmented_phrases']:
            phrase_info = result['segmented_phrases'][0]
            print(f"   \"{phrase}\" ‚Üí {phrase_info['type']} ({phrase_info['stage']})")
        else:
            print(f"   \"{phrase}\" ‚Üí No classification")

def test_examples_from_description():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏°‡∏≤"""
    print("\n\nüéØ Testing User Examples")
    print("=" * 50)
    
    examples = [
        {
            "input": "‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏¥‡∏Å ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡πà‡∏≠‡∏¢",
            "expected_phrases": ["‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏≠‡∏°", "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏¥‡∏Å", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡πà‡∏≠‡∏¢"],
            "expected_stage1_filter": ["‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏≠‡∏°"],
            "expected_stage2_content": ["‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏¥‡∏Å"],
            "expected_stage3_questions": ["‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏ô‡πà‡∏≠‡∏¢"]
        },
        {
            "input": "‡∏°‡∏µ‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 15,000 ‡πÑ‡∏´‡∏°",
            "expected_phrases": ["‡∏°‡∏µ‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 15,000 ‡πÑ‡∏´‡∏°"],
            "expected_stage1_filter": ["‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å", "‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 15000"],
            "expected_stage3_questions": ["‡∏°‡∏µ‡πÑ‡∏´‡∏°"]
        },
        {
            "input": "‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° valorant ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 25000",
            "expected_phrases": ["‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å", "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° valorant", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 25000"],
            "expected_stage1_filter": ["‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å", "‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 25000"],
            "expected_stage2_content": ["‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° valorant"]
        },
        {
            "input": "Ryzen 5 5600G ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°",
            "expected_phrases": ["Ryzen 5 5600G", "‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°"],
            "expected_stage1_inference": ["Ryzen 5 5600G"],
            "expected_stage2_content": ["Ryzen 5 5600G"],
            "expected_stage3_questions": ["‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°"]
        }
    ]
    
    for i, example in enumerate(examples, 1):
        print(f"\n{i}. Testing: \"{example['input']}\"")
        
        result = enhanced_contextual_phrase_segmentation(example['input'])
        phrases = [p['phrase'] for p in result['segmented_phrases']]
        
        print(f"   Expected phrases: {example['expected_phrases']}")
        print(f"   Actual phrases: {phrases}")
        
        stage_assignments = result['stage_assignments']
        print(f"   Stage assignments:")
        for stage, actual_phrases in stage_assignments.items():
            if actual_phrases:
                expected_key = f"expected_{stage}"
                expected = example.get(expected_key, [])
                status = "‚úÖ" if set(actual_phrases) == set(expected) else "‚ùå"
                print(f"     {stage}: {actual_phrases} {status}")

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    print("üöÄ Testing Enhanced Three-Stage System")
    print("=" * 60)
    
    # Test phrase segmentation
    test_enhanced_phrase_segmentation()
    
    # Test phrase classification
    test_phrase_classification()
    
    # Test user examples
    test_examples_from_description()
    
    # Test Stage 1 analysis
    await test_stage1_analysis()
    
    print("\n\n‚úÖ Testing completed!")
    print("\nüéØ **Enhanced Three-Stage System Summary:**")
    print("**Stage 1**: Context analysis + phrase segmentation + basic filtering")
    print("  - Filter phrases: ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô, ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")
    print("  - Inference phrases: ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡∏≠‡∏ô‡∏∏‡∏°‡∏≤‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà)")
    print("  - Output: MongoDB query + phrase assignments for other stages")
    print()
    print("**Stage 2**: Content analysis of assigned phrases")
    print("  - Content phrases: ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå, ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô, ‡∏™‡πÄ‡∏õ‡∏Ñ, ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞")
    print("  - Analysis: title (‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå/‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå) + description (‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô/‡∏™‡πÄ‡∏õ‡∏Ñ)")
    print()
    print("**Stage 3**: Question answering using filtered products")
    print("  - Question phrases: ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°, ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
    print("  - Analysis: ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô Stage 1+2")

if __name__ == "__main__":
    asyncio.run(main()) 
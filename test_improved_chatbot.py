"""
Test script for the improved 2-LLM chatbot system
Tests various user inputs to validate the enhanced query generation and product ranking
"""

import asyncio
import os
import sys
import json
from motor.motor_asyncio import AsyncIOMotorClient

# Add the backend directory to the Python path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from app.services.chatbot import ITStoreChatbot
from app.database import connect_to_mongodb, get_database

async def test_chatbot_queries():
    """Test the improved chatbot with various user inputs"""
    
    # Initialize database connection
    try:
        await connect_to_mongodb()
        database = await get_database()
        chatbot = ITStoreChatbot(database)
        print("‚úÖ Database connection established")
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        return

    # Test cases covering different scenarios
    test_cases = [
        {
            "name": "Budget constraint with category",
            "input": "‡∏°‡∏µ‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 15,000 ‡πÑ‡∏´‡∏°",
            "expected": "Should find notebooks under 15,000 baht"
        },
        {
            "name": "Gaming requirement", 
            "input": "‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏á‡∏ö 30000",
            "expected": "Should find gaming notebooks under 30,000 baht"
        },
        {
            "name": "Specific component with misspelling",
            "input": "‡∏Å‡∏≤‡∏£‡πå‡∏à‡∏≠ RTX 4060 ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 15000",
            "expected": "Should find RTX 4060 graphics cards under 15,000 baht"
        },
        {
            "name": "Ambiguous term - ‡∏Ñ‡∏≠‡∏°",
            "input": "‡∏Ñ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏á‡∏ö 20000",
            "expected": "Should understand '‡∏Ñ‡∏≠‡∏°' as computers/notebooks"
        },
        {
            "name": "Keyboard with features",
            "input": "‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î mechanical ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ",
            "expected": "Should find quiet mechanical keyboards"
        },
        {
            "name": "Mouse for gaming",
            "input": "‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏Å‡∏°‡∏°‡∏¥‡πà‡∏á‡πÑ‡∏£‡πâ‡∏™‡∏≤‡∏¢ RGB",
            "expected": "Should find wireless gaming mice with RGB"
        },
        {
            "name": "Monitor search",
            "input": "‡∏à‡∏≠‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå 24 ‡∏ô‡∏¥‡πâ‡∏ß gaming",
            "expected": "Should find 24-inch gaming monitors"
        },
        {
            "name": "Brand specific",
            "input": "‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ ASUS ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°",
            "expected": "Should find ASUS gaming notebooks"
        },
        {
            "name": "Very specific product",
            "input": "‡πÅ‡∏£‡∏° DDR4 16GB 3200MHz",
            "expected": "Should find specific RAM specifications"
        },
        {
            "name": "General category browse",
            "input": "‡∏´‡∏π‡∏ü‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á",
            "expected": "Should show various headphone options"
        }
    ]

    print("\n" + "="*80)
    print("üß™ TESTING IMPROVED 2-LLM CHATBOT SYSTEM")
    print("="*80)

    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù Test Case {i}: {test_case['name']}")
        print(f"Input: \"{test_case['input']}\"")
        print(f"Expected: {test_case['expected']}")
        print("-" * 60)
        
        try:
            # Process the user input
            result = await chatbot.process_user_input(test_case['input'])
            
            # Display results
            print(f"üîç MongoDB Query Generated:")
            print(json.dumps(result.get('mongoQuery', {}), ensure_ascii=False, indent=2))
            
            print(f"\nüìä Results Summary:")
            print(f"- Confidence: {result.get('confidence', 0):.1f}")
            print(f"- Raw products found: {result.get('rawProductCount', 0)}")
            print(f"- Filtered products: {result.get('filteredProductCount', 0)}")
            
            print(f"\nü§ñ LLM Response:")
            print(result.get('response', 'No response'))
            
            # Show top products if any
            products = result.get('products', [])
            if products:
                print(f"\nüõçÔ∏è Top Products ({len(products)}):")
                for j, product in enumerate(products[:3], 1):
                    print(f"{j}. {product.title}")
                    print(f"   Price: ‡∏ø{product.salePrice:,} | Rating: {product.rating}/5 | Stock: {product.stockQuantity}")
                    print(f"   Category: {product.cateName}")
            else:
                print("‚ùå No products found")
            
            # Show entities extracted
            entities = result.get('entities', {})
            if entities:
                print(f"\nüî¨ Entities Extracted:")
                for key, value in entities.items():
                    if value:
                        print(f"   {key}: {value}")
            
        except Exception as e:
            print(f"‚ùå Test failed with error: {e}")
            import traceback
            traceback.print_exc()
        
        print("\n" + "="*80)

    print(f"\n‚úÖ Testing completed! Tested {len(test_cases)} cases.")

async def test_specific_query():
    """Test specific problematic query mentioned by user"""
    
    await connect_to_mongodb()
    database = await get_database()
    chatbot = ITStoreChatbot(database)
    
    test_input = "‡∏°‡∏µ‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 15,000 ‡πÑ‡∏´‡∏°"
    
    print("\nüéØ SPECIFIC TEST - User's Problematic Query")
    print("="*60)
    print(f"Input: \"{test_input}\"")
    
    result = await chatbot.process_user_input(test_input)
    
    print(f"\nüîç Generated MongoDB Query:")
    query = result.get('mongoQuery', {})
    print(json.dumps(query, ensure_ascii=False, indent=2))
    
    print(f"\nüìä Expected vs Actual:")
    print("Expected Query Structure:")
    expected_query = {
        "stockQuantity": {"$gt": 0},
        "cateName": "Notebooks", 
        "salePrice": {"$lte": 15000}
    }
    print(json.dumps(expected_query, ensure_ascii=False, indent=2))
    
    print(f"\n‚úÖ Query Validation:")
    if query.get('cateName') == 'Notebooks':
        print("‚úÖ Category correctly identified as 'Notebooks'")
    else:
        print(f"‚ùå Category mismatch. Expected 'Notebooks', got '{query.get('cateName')}'")
    
    if query.get('salePrice', {}).get('$lte') == 15000:
        print("‚úÖ Budget correctly set to ‚â§ 15,000")
    else:
        print(f"‚ùå Budget mismatch. Expected ‚â§15000, got {query.get('salePrice')}")
    
    if query.get('stockQuantity', {}).get('$gt') == 0:
        print("‚úÖ Stock filter correctly applied")
    else:
        print("‚ùå Stock filter missing or incorrect")
    
    products = result.get('products', [])
    print(f"\nüì¶ Found {len(products)} products")
    
    if products:
        print("Sample products:")
        for i, p in enumerate(products[:3], 1):
            print(f"{i}. {p.title} - ‡∏ø{p.salePrice:,} ({p.cateName})")

if __name__ == "__main__":
    print("üöÄ Starting Enhanced Chatbot Tests...")
    
    # Run the specific test first
    asyncio.run(test_specific_query())
    
    # Then run comprehensive tests
    asyncio.run(test_chatbot_queries())